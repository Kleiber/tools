#!/bin/bash

## author: KleiberXD

ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE-$0}")" && pwd)"

source "${ROOT_DIR}/scripts/help.sh"
source "${ROOT_DIR}/scripts/utils.sh"

EXEC="build"
INPUT_FILE="in.tpp"
OUTPUT_FILE="out.tpp"
EXPECTED_FILE="expected.tpp"
READY_FILE="ready"

TPP_DIR=".tpp"
CONFIG_FILE="config"
EXTENSION="cpp"

# get filename from config file
function get_filename() {
  local config="$TPP_DIR/$CONFIG_FILE"
  if ! fileExists $config; then
    exit 1
  fi

  local filename=$(cat $config | grep -oP "name\s*=\s*\K[\w\s-._]+")
  if errorExists; then
    exit 1
  fi

  echo $filename
}

#  init new template cpp
function init_tpp() {
  if validateName $1; then
    echo "Error: invalid solution name '$1'" >&2
    exit 1
  fi

  if dirExists $1; then
    echo "Error: solution '$1' already exists" >&2
    exit 1
  fi

  local filename="$1.$EXTENSION"
  # create root and .tpp directories
  mkdir $1
  mkdir "$1/$TPP_DIR"
  # generate input, output and expected files
  touch "$1/$INPUT_FILE"
  touch "$1/$OUTPUT_FILE"
  touch "$1/$EXPECTED_FILE"

# generate tpp config file
  cat > "$1/$TPP_DIR/$CONFIG_FILE" <<-EOF
[info]
    name = $filename
    date = $(date +"%d-%m-%Y")
    hour = $(date +"%T")
EOF
  if errorExists; then
    echo "Error: solution init failed '$1'" >&2
    exit 1
  fi

  # define reference to debug.h
  local reference=$ROOT_DIR
  if isWindows; then
    local partition="${reference:1:1}"
    reference="${partition^}:${reference:2}"
  fi

  # generate cpp template file
  cat > "$1/$filename" <<-EOF
/**
*  Generated by tpp tool
*  File: $filename
*  Created: $(date +"%d-%m-%Y %T")
**/

#include <bits/stdc++.h>
using namespace std;

// remove this reference to debug.h before your submission
#include "${reference}/debug.h"

int main() {
  // do not remove this code if you use cin or cout
  ios::sync_with_stdio(false);
  cin.tie(0);

  return 0;
}
EOF
  if errorExists; then
    echo "Error: solution init failed '$1'" >&2
    exit 1
  fi

  echo "solution '$1' was initialized successfully!"
}

# build cpp file
function build_tpp() {
  if ! fileExists $1; then
    echo "Error: $1 file does not exist" >&2
    exit 1
  fi

  g++ -o $EXEC $1
  if errorExists; then
    echo "Error: $1 compilation failed" >&2
    exit 1
  fi
}

# run cpp file with input file
function run_with_input() {
  ./$EXEC < $INPUT_FILE
  if errorExists; then
    echo "Error: $1 execution with input $INPUT_FILE failed" >&2
    exit 1
  fi
}

# run cpp file without input file
function run_without_input() {
  ./$EXEC
  if errorExists; then
    echo "Error: $1 execution failed" >&2
    exit 1
  fi
}

# compile and run cpp file with/without the input file
function run_tpp() {
  if ! fileExists $1; then
    echo "Error: $1 file does not exist" >&2
    exit 1
  fi

  build_tpp $1
  if fileExists $INPUT_FILE; then
    if isEmpty $INPUT_FILE; then
      run_without_input $1
    else
      run_with_input $1
    fi
  else
    run_without_input $1
  fi
}

# run cpp file with input file to test function
function run_tpp_to_test() {
  (./$EXEC < $INPUT_FILE) 2> /dev/null
  if errorExists; then
    echo "Error: $1 execution with input $INPUT_FILE failed" >&2
    exit 1
  fi
}

# compile, run and test cpp file ouput with the test file
function test_tpp() {
  if ! fileExists $1; then
    echo "Error: $1 file does not exist" >&2
    exit 1
  fi

  if ! fileExists $INPUT_FILE; then
    echo "Error: $INPUT_FILE file does not exist" >&2
    exit 1
  fi

  if isEmpty $INPUT_FILE; then
      echo "Error: $INPUT_FILE file with no data" >&2
      exit 1
  fi

  if ! fileExists $EXPECTED_FILE; then
    echo "Error: $EXPECTED_FILE file does not exist" >&2
    exit 1
  fi

  if isEmpty $EXPECTED_FILE; then
    echo "Error: $EXPECTED_FILE file with no data" >&2
    exit 1
  fi

  run_tpp_to_test $1 > $OUTPUT_FILE
  diff $EXPECTED_FILE $OUTPUT_FILE --color
  if errorExists; then
    echo diff $EXPECTED_FILE $OUTPUT_FILE >&2
    echo "$1 test FAILED!"
    exit 1
  fi
  echo "$1 test PASSED!"
}

# prepate file to submission by cleaning debug reference and its usage
function prepare_tpp() {
  if ! fileExists $1; then
    echo "Error: $1 file does not exist" >&2
    exit 1
  fi

  local tmp_file=".$1"
  local ready_file="${1%.*}_$READY_FILE.$EXTENSION"

  # TODO: investigate how to put the below two sed command in one
  # line, for some reason the next command is not working in Mac OS
  # $ sed '/debug.h\|debug(/d' $1

  # remove 'include' reference
  sed '/debug.h/d' $1 > $tmp_file
  if errorExists; then
    echo "Error: prepare $1 file failed" >&2
    exit 1
  fi
  # remove 'debug(<var>)' use
  sed '/debug(/d' $tmp_file > $ready_file
  if errorExists; then
    echo "Error: prepare $1 file failed" >&2
    exit 1
  fi
  rm $tmp_file

  echo "$ready_file was generated successfully!"

  test_tpp $ready_file
  if errorExists; then
    echo "Error: test $ready_file file failed" >&2
    exit 1
  fi
}

function tpp() {
  local commands=($@)
  help_tpp ${commands[@]}

  if [ "${#commands[@]}" -gt 2 ]; then
    echo "Error: at most 2 arguments are accepted, use the -h flag for more details" >&2
    exit 1
  fi

  if [[ "${#commands[@]}" -eq 2 && "${commands[0]}" != "init" ]]; then
    echo "Error: this command accepts one argument, use the -h flag for more details" >&2
    exit 1
  fi

  local command="${commands[0]}"
  local filename=""
  if [ $command == "init" ]; then
    filename=${commands[1]}
  else
    filename=$(get_filename)
    if errorExists; then
      echo "Error: there is not a solution" >&2
      exit 1
    fi
  fi

  case $command in
    "init")
      init_tpp $filename
      ;;
    "build")
      build_tpp $filename
      ;;
    "run")
      run_tpp $filename
      ;;
    "test")
      test_tpp $filename
      ;;
    "prepare")
      prepare_tpp $filename
      ;;
    *)
      echo "Error: Invalid arguments, use the -h flag for more details" >&2
      ;;
  esac
}

tpp $@
