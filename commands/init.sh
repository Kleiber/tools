#!/usr/bin/env bash

## author: KleiberXD

set -e

function linux_os_template() {
    local solutionDir=${1}
    local solutionFilename=${2}
    local debugReferencePath=${3}

    cat > "${solutionDir}/${solutionFilename}" <<-EOF
/**
*  Generated by tpp tool
*  File: ${solutionFilename}
*  Created: $(date +"%d-%m-%Y %T")
**/

#include <bits/stdc++.h>
using namespace std;

// remove this reference to debug.h before your submission
#include "${debugReferencePath}/debug.h"

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    return 0;
}

EOF
}

function mac_os_template {
    local solutionDir=${1}
    local solutionFilename=${2}
    local debugReferencePath=${3}

    cat > "${solutionDir}/${solutionFilename}" <<-EOF
/**
*  Generated by tpp tool
*  File: ${solutionFilename}
*  Created: $(date +"%d-%m-%Y %T")
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;

// remove this reference to debug.h before your submission
#include "${debugReferencePath}/debug.h"

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    return 0;
}

EOF
}

config_template() {
    local solutionFilename=${1}
    local solutionConfigFilepath=${2}

    cat > ${solutionConfigFilepath} <<-EOF
[info]
    name = $solutionFilename
    create = $(date +"%d-%m-%Y %H:%M:%S")
    judge = empty
    tag = empty
    update = $(date +"%d-%m-%Y %H:%M:%S")
    test = Pending
EOF
}

function init_tpp_solution() {
    local solutionName=${1}
    local solutionDir="${TPP_WORKSPACE}/${solutionName}"

    if isValidName ${solutionName}; then
        echo "Error: invalid solution name '${solutionName}'." >&2
        exit 1
    fi

    if dirExists ${solutionDir}; then
        echo "Error: '${solutionName}' solution already exists." >&2
        exit 1
    fi

    # create solution and tpp config directories
    mkdir -p ${solutionDir}
    mkdir -p "${solutionDir}/${SOLUTION_CONFIG_DIR}"

    # create input, output and expected tpp files
    touch "${solutionDir}/${SOLUTION_INPUT_FILE}"
    touch "${solutionDir}/${SOLUTION_OUTPUT_FILE}"
    touch "${solutionDir}/${SOLUTION_EXPECTED_FILE}"

    # create tpp config file
    local solutionConfigDir="${solutionDir}/${SOLUTION_CONFIG_DIR}"
    local solutionConfigFile="${solutionDir}/${SOLUTION_CONFIG_DIR}/${SOLUTION_CONFIG_FILE}"
    local solutionFilename="${solutionName}.${SOLUTION_EXTENSION_FILE}"

    config_template ${solutionFilename} ${solutionConfigFile}

    # define reference to debug.h
    local debugReferencePath=${TPP_DIR}

    if isWindows; then
        local partition="${debugReferencePath:1:1}"
        debugReferencePath="${partition^}:${debugReferencePath:2}"
    fi

    # generate cpp template file
    if isMac; then
        mac_os_template ${solutionDir} ${solutionFilename} ${debugReferencePath}
    else
        linux_os_template ${solutionDir} ${solutionFilename} ${debugReferencePath}
    fi

    echo "'${solutionName}' solution was initialized successfully!"
}

init_help() {
    cat <<EOF

Init a new solution with the specified name.

Usage:  tpp init <solution-name>

Options:
  -h, --help   Show more information about command

Run 'tpp COMMAND --help' for more information about a given command.
EOF
}

init_cmd() {
    if [[ ${#} -gt 1 ]]; then
        echo "Error: Invalid number of arguments." >&2
        exit 1
    fi

    local argument=${1}
    case ${argument} in
        --help | -h)
            init_help
            ;;
        *)
            init_tpp_solution ${argument}
            ;;
    esac
}
